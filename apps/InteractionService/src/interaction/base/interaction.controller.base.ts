/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { InteractionService } from "../interaction.service";
import { InteractionCreateInput } from "./InteractionCreateInput";
import { Interaction } from "./Interaction";
import { InteractionFindManyArgs } from "./InteractionFindManyArgs";
import { InteractionWhereUniqueInput } from "./InteractionWhereUniqueInput";
import { InteractionUpdateInput } from "./InteractionUpdateInput";

export class InteractionControllerBase {
  constructor(protected readonly service: InteractionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Interaction })
  async createInteraction(
    @common.Body() data: InteractionCreateInput
  ): Promise<Interaction> {
    return await this.service.createInteraction({
      data: data,
      select: {
        createdAt: true,
        id: true,
        message: true,
        response: true,
        timestamp: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Interaction] })
  @ApiNestedQuery(InteractionFindManyArgs)
  async interactions(@common.Req() request: Request): Promise<Interaction[]> {
    const args = plainToClass(InteractionFindManyArgs, request.query);
    return this.service.interactions({
      ...args,
      select: {
        createdAt: true,
        id: true,
        message: true,
        response: true,
        timestamp: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Interaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async interaction(
    @common.Param() params: InteractionWhereUniqueInput
  ): Promise<Interaction | null> {
    const result = await this.service.interaction({
      where: params,
      select: {
        createdAt: true,
        id: true,
        message: true,
        response: true,
        timestamp: true,
        updatedAt: true,
        userId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Interaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateInteraction(
    @common.Param() params: InteractionWhereUniqueInput,
    @common.Body() data: InteractionUpdateInput
  ): Promise<Interaction | null> {
    try {
      return await this.service.updateInteraction({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          message: true,
          response: true,
          timestamp: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Interaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteInteraction(
    @common.Param() params: InteractionWhereUniqueInput
  ): Promise<Interaction | null> {
    try {
      return await this.service.deleteInteraction({
        where: params,
        select: {
          createdAt: true,
          id: true,
          message: true,
          response: true,
          timestamp: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
