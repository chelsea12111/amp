/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LearningModel } from "./LearningModel";
import { LearningModelCountArgs } from "./LearningModelCountArgs";
import { LearningModelFindManyArgs } from "./LearningModelFindManyArgs";
import { LearningModelFindUniqueArgs } from "./LearningModelFindUniqueArgs";
import { CreateLearningModelArgs } from "./CreateLearningModelArgs";
import { UpdateLearningModelArgs } from "./UpdateLearningModelArgs";
import { DeleteLearningModelArgs } from "./DeleteLearningModelArgs";
import { LearningModelService } from "../learningModel.service";
@graphql.Resolver(() => LearningModel)
export class LearningModelResolverBase {
  constructor(protected readonly service: LearningModelService) {}

  async _learningModelsMeta(
    @graphql.Args() args: LearningModelCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LearningModel])
  async learningModels(
    @graphql.Args() args: LearningModelFindManyArgs
  ): Promise<LearningModel[]> {
    return this.service.learningModels(args);
  }

  @graphql.Query(() => LearningModel, { nullable: true })
  async learningModel(
    @graphql.Args() args: LearningModelFindUniqueArgs
  ): Promise<LearningModel | null> {
    const result = await this.service.learningModel(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LearningModel)
  async createLearningModel(
    @graphql.Args() args: CreateLearningModelArgs
  ): Promise<LearningModel> {
    return await this.service.createLearningModel({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => LearningModel)
  async updateLearningModel(
    @graphql.Args() args: UpdateLearningModelArgs
  ): Promise<LearningModel | null> {
    try {
      return await this.service.updateLearningModel({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LearningModel)
  async deleteLearningModel(
    @graphql.Args() args: DeleteLearningModelArgs
  ): Promise<LearningModel | null> {
    try {
      return await this.service.deleteLearningModel(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
