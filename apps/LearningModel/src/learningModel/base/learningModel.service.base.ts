/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, LearningModel as PrismaLearningModel } from "@prisma/client";

export class LearningModelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LearningModelCountArgs, "select">
  ): Promise<number> {
    return this.prisma.learningModel.count(args);
  }

  async learningModels<T extends Prisma.LearningModelFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.LearningModelFindManyArgs>
  ): Promise<PrismaLearningModel[]> {
    return this.prisma.learningModel.findMany<Prisma.LearningModelFindManyArgs>(
      args
    );
  }
  async learningModel<T extends Prisma.LearningModelFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.LearningModelFindUniqueArgs>
  ): Promise<PrismaLearningModel | null> {
    return this.prisma.learningModel.findUnique(args);
  }
  async createLearningModel<T extends Prisma.LearningModelCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LearningModelCreateArgs>
  ): Promise<PrismaLearningModel> {
    return this.prisma.learningModel.create<T>(args);
  }
  async updateLearningModel<T extends Prisma.LearningModelUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LearningModelUpdateArgs>
  ): Promise<PrismaLearningModel> {
    return this.prisma.learningModel.update<T>(args);
  }
  async deleteLearningModel<T extends Prisma.LearningModelDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.LearningModelDeleteArgs>
  ): Promise<PrismaLearningModel> {
    return this.prisma.learningModel.delete(args);
  }
}
