/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LearningModelService } from "../learningModel.service";
import { LearningModelCreateInput } from "./LearningModelCreateInput";
import { LearningModel } from "./LearningModel";
import { LearningModelFindManyArgs } from "./LearningModelFindManyArgs";
import { LearningModelWhereUniqueInput } from "./LearningModelWhereUniqueInput";
import { LearningModelUpdateInput } from "./LearningModelUpdateInput";

export class LearningModelControllerBase {
  constructor(protected readonly service: LearningModelService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LearningModel })
  async createLearningModel(
    @common.Body() data: LearningModelCreateInput
  ): Promise<LearningModel> {
    return await this.service.createLearningModel({
      data: data,
      select: {
        createdAt: true,
        id: true,
        lastUpdated: true,
        modelName: true,
        parameters: true,
        updatedAt: true,
        version: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LearningModel] })
  @ApiNestedQuery(LearningModelFindManyArgs)
  async learningModels(
    @common.Req() request: Request
  ): Promise<LearningModel[]> {
    const args = plainToClass(LearningModelFindManyArgs, request.query);
    return this.service.learningModels({
      ...args,
      select: {
        createdAt: true,
        id: true,
        lastUpdated: true,
        modelName: true,
        parameters: true,
        updatedAt: true,
        version: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LearningModel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async learningModel(
    @common.Param() params: LearningModelWhereUniqueInput
  ): Promise<LearningModel | null> {
    const result = await this.service.learningModel({
      where: params,
      select: {
        createdAt: true,
        id: true,
        lastUpdated: true,
        modelName: true,
        parameters: true,
        updatedAt: true,
        version: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LearningModel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLearningModel(
    @common.Param() params: LearningModelWhereUniqueInput,
    @common.Body() data: LearningModelUpdateInput
  ): Promise<LearningModel | null> {
    try {
      return await this.service.updateLearningModel({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          lastUpdated: true,
          modelName: true,
          parameters: true,
          updatedAt: true,
          version: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LearningModel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLearningModel(
    @common.Param() params: LearningModelWhereUniqueInput
  ): Promise<LearningModel | null> {
    try {
      return await this.service.deleteLearningModel({
        where: params,
        select: {
          createdAt: true,
          id: true,
          lastUpdated: true,
          modelName: true,
          parameters: true,
          updatedAt: true,
          version: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
